version: '3.7'

services:

  tekana-customer-svc:
    image: "tekana-customer-svc:dev"
    networks:
      - "frontend"
      - "backend"
      - "customerdomain"
    ports:
      - "50051:50051"
    build:
      context: "./microservices/tekana-customer-svc"
    depends_on:
      - "customer-db"
    environment:
      NODE_ENV: "test"
      URL: "0.0.0.0"
      PORT: "50051"
      DB_NAME: "postgres"
      DB_HOST: "customer-db"
      DB_PORT: "5432"
      DB_USER: "postgres"
      DB_PASSWORD: "12345"

  tekana-wallet-svc:
    image: "tekana-wallet-svc:dev"
    networks:
      - "frontend"
      - "backend"
      - "walletdomain"
    ports:
      - "50052:50052"
    build:
      context: "./microservices/tekana-wallet-svc"
    depends_on:
      - "wallet-db"
    environment:
      NODE_ENV: "test"
      URL: "0.0.0.0"
      PORT: "50052"
      DB_NAME: "postgres"
      DB_HOST: "wallet-db"
      DB_PORT: "5432"
      DB_USER: "postgres"
      DB_PASSWORD: "12345"

  tekana-transaction-svc:
    image: "tekana-transaction-svc:dev"
    networks:
      - "frontend"
      - "backend"
      - "transactiondomain"
    ports:
      - "50053:50053"
    build:
      context: "./microservices/tekana-transaction-svc"
    depends_on:
      - "transaction-db"
    environment:
      NODE_ENV: "test"
      URL: "0.0.0.0"
      PORT: "50053"
      DB_NAME: "postgres"
      DB_HOST: "transaction-db"
      DB_PORT: "5432"
      DB_USER: "postgres"
      DB_PASSWORD: "12345"

  tekana-api-gateway:
    image: "tekana-api-gateway:dev"
    networks:
      - "frontend"
    ports:
      - "3000:3000"
    build:
      context: "./tekana-api-gateway"
    depends_on:
      - "tekana-transaction-svc"
      - "tekana-wallet-svc"
      - "tekana-customer-svc"
    environment:
      NODE_ENV: "test"
      PORT: "3000"
      CUSTOMER_SVC_URL: "tekana-customer-svc"
      CUSTOMER_SVC_PORT: "50051"
      WALLET_SVC_URL: "tekana-wallet-svc"
      WALLET_SVC_PORT: "50052"
      TRANSACTION_SVC_URL: "tekana-transaction-svc"
      TRANSACTION_SVC_PORT: "50053"

  swagger-ui:
    image: "swaggerapi/swagger-ui:v3.25.0"
    networks:
      - "frontend"
    ports:
      - "8080:8080"
    volumes:
      - "./docs/openapi-spec.yaml:/usr/share/spec/openapi-spec.yaml"
    environment:
      SWAGGER_JSON: "/usr/share/spec/openapi-spec.yaml"
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "localhost:8080 -q -O - > /dev/null 2>&1"
        ]
      interval: 30s
      timeout: 10s
      retries: 5

  customer-db:
    image: "postgres:12.1-alpine"
    networks:
      - "customerdomain"
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: '12345'
    healthcheck:
      test: [ "CMD-SHELL", "su -c 'pg_isready -U postgres' 12345" ]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: "on-failure"
  
  wallet-db:
    image: "postgres:12.1-alpine"
    networks:
      - "walletdomain"
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: '12345'
    healthcheck:
      test: [ "CMD-SHELL", "su -c 'pg_isready -U postgres' 12345" ]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: "on-failure"

  transaction-db:
    image: "postgres:12.1-alpine"
    networks:
      - "transactiondomain"
    ports:
      - "5434:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: '12345'
    healthcheck:
      test: [ "CMD-SHELL", "su -c 'pg_isready -U postgres' 12345" ]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: "on-failure"

networks:
  frontend:
  backend:
  customerdomain:
  walletdomain:
  transactiondomain:
